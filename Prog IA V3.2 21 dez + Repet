import pandas as pd
import random
from collections import defaultdict, Counter
from itertools import combinations

# Função para analisar os dados fornecidos
def parse_provided_data():
    provided_data = """
    3304    27/01/2025  seg  01^{-1}  03^{-0}  04^{-0}  05^{-0}  07^{-0}  09^{-1}  10^{-1}  11^{-1}  12^{-1}  14^{-2}  15^{-1}  19^{-1}  20^{-0}  21^{-0}  23^{-0}
    3305    28/01/2025  ter  03^{-0}  04^{-0}  05^{-0}  07^{-0}  08^{-1}  09^{-0}  12^{-0}  13^{-1}  17^{-5}  19^{-0}  20^{-0}  21^{-0}  23^{-0}  24^{-1}  25^{-2}
    3306    29/01/2025  qua  04^{-0}  05^{-0}  06^{-2}  08^{-0}  09^{-0}  10^{-1}  11^{-1}  14^{-1}  15^{-1}  17^{-0}  18^{-2}  19^{-0}  21^{-0}  22^{-2}  24^{-0}
    3307    30/01/2025  qui  01^{-2}  05^{-0}  08^{-0}  09^{-0}  10^{-0}  11^{-0}  12^{-1}  16^{-3}  18^{-0}  19^{-0}  21^{-0}  22^{-0}  23^{-1}  24^{-0}  25^{-1}
    3308    31/01/2025  sex  01^{-0}  06^{-1}  07^{-2}  08^{-0}  10^{-0}  11^{-0}  12^{-0}  13^{-2}  14^{-1}  15^{-1}  16^{-0}  18^{-0}  23^{-0}  24^{-0}  25^{-0}
    3309    01/02/2025  sáb  02^{-5}  03^{-3}  05^{-1}  09^{-1}  10^{-0}  11^{-0}  13^{-0}  14^{-0}  15^{-0}  18^{-0}  19^{-1}  21^{-1}  22^{-1}  23^{-0}  25^{-0}
    3310    03/02/2025  seg  01^{-1}  02^{-0}  04^{-3}  05^{-0}  06^{-1}  07^{-1}  10^{-0}  12^{-1}  13^{-0}  16^{-1}  18^{-0}  19^{-0}  20^{-0}  21^{-0}  24^{-1}
    3311    04/02/2025  ter  02^{-0}  03^{-1}  04^{-0}  05^{-0}  06^{-0}  09^{-1}  10^{-0}  11^{-1}  12^{-0}  14^{-1}  17^{-4}  19^{-0}  20^{-0}  22^{-1}  24^{-0}
    3312    05/02/2025  qua  01^{-1}  02^{-0}  03^{-0}  04^{-0}  05^{-0}  06^{-0}  08^{-3}  09^{-0}  13^{-1}  15^{-2}  16^{-1}  17^{-0}  20^{-0}  21^{-1}  25^{-2}
    3313    06/02/2025  qui  01^{-0}  04^{-0}  05^{-0}  06^{-0}  07^{-2}  09^{-0}  11^{-1}  13^{-0}  14^{-1}  16^{-0}  17^{-0}  18^{-2}  19^{-1}  20^{-0}  24^{-1}
    3314    07/02/2025  sex  01^{-0}  02^{-1}  03^{-1}  05^{-0}  06^{-0}  07^{-0}  08^{-1}  10^{-2}  13^{-0}  14^{-0}  15^{-1}  17^{-0}  19^{-0}  22^{-2}  25^{-1}
    3315    08/02/2025  sáb  02^{-0}  03^{-0}  04^{-1}  06^{-0}  07^{-0}  08^{-0}  09^{-1}  11^{-1}  12^{-3}  14^{-0}  17^{-0}  18^{-1}  21^{-2}  24^{-1}  25^{-0}
    3316    10/02/2025  seg  02^{-0}  03^{-0}  07^{-0}  10^{-1}  11^{-0}  14^{-0}  15^{-1}  16^{-2}  17^{-0}  18^{-0}  20^{-2}  21^{-0}  22^{-1}  23^{-0}  25^{-0}
    3317    11/02/2025  ter  01^{-2}  02^{-0}  03^{-0}  04^{-1}  05^{-2}  06^{-1}  11^{-0}  12^{-1}  13^{-2}  14^{-0}  18^{-0}  20^{-0}  21^{-0}  22^{-0}  25^{-0}
    3318    12/02/2025  qua  01^{-0}  03^{-0}  06^{-0}  09^{-2}  10^{-1}  11^{-0}  12^{-0}  13^{-0}  14^{-0}  15^{-1}  19^{-3}  20^{-0}  22^{-0}  24^{-2}  25^{-0}
    """
    
    lines = [line.strip() for line in provided_data.split('\n') if line.strip()]
    data = []
    for line in lines:
        parts = line.split()
        concurso = parts[0]
        data_info = parts[1]
        dia = parts[2]
        dezenas = [int(num.split('^{-')[0]) for num in parts[3:18]]
        data.append([concurso, data_info, dia] + dezenas)
    
    columns = ['Concurso', 'Data', 'Dia'] + [f'Bola{i}' for i in range(1, 16)]
    return pd.DataFrame(data, columns=columns)

# Funções existentes atualizadas
def calcular_frequencia_e_atraso(df, ultimos_n_concursos=15):
    frequencia = defaultdict(int)
    atraso = defaultdict(int)
    
    ultimos_concursos = df.tail(ultimos_n_concursos)
    
    # Cálculo de frequência
    for _, row in ultimos_concursos.iterrows():
        for dezena in row[3:18]:
            frequencia[dezena] += 1
    
    # Cálculo de atraso
    for dezena in range(1, 26):
        atraso[dezena] = 0
        for idx in reversed(range(len(df))):
            if dezena in df.iloc[idx, 3:18].values:
                break
            atraso[dezena] += 1
    
    return frequencia, atraso

def preencher_grupos(frequencia, atraso):
    grupos = {'A': [], 'B': [], 'C': [], 'D': [], 'E': [], 'F': [], 'G': []}
    dezenas_usadas = set()
    
    # Prioriza dezenas com menor frequência e maior atraso
    dezenas_prioridade = sorted(
        range(1, 26),
        key=lambda x: (frequencia[x], -atraso[x])
    )
    
    for grupo in grupos:
        # Seleciona 2 dezenas menos frequentes
        selecionadas = [d for d in dezenas_prioridade if d not in dezenas_usadas][:2]
        grupos[grupo].extend(selecionadas)
        dezenas_usadas.update(selecionadas)
        
        # Seleciona 1 dezena com maior atraso não utilizada
        for d in sorted(atraso, key=lambda x: -atraso[x]):
            if d not in dezenas_usadas:
                grupos[grupo].append(d)
                dezenas_usadas.add(d)
                break
    
    return grupos

# Restante do código mantido igual
def gerar_jogos(grupos):
    return [sorted(sum((grupos[g] for g in comb), [])) for comb in combinations(grupos.keys(), 5)]

def main():
    df = parse_provided_data()
    frequencia, atraso = calcular_frequencia_e_atraso(df)
    grupos = preencher_grupos(frequencia, atraso)
    
    print("Grupos atualizados com base nos últimos 15 concursos:")
    for g, d in grupos.items():
        print(f"{g}: {sorted(d)}")
    
    jogos = gerar_jogos(grupos)
    print("\nJogos gerados (15 dezenas cada):")
    for i, jogo in enumerate(jogos[:21], 1):
        print(f"Jogo {i}: {jogo}")

if __name__ == "__main__":
    main()
